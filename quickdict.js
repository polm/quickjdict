// Generated by LiveScript 1.2.0
(function(){
  var fs, file, dict, resultsDiv, queryBox, getMatches, addResult, updateResults, debounce, debouncedUpdate;
  fs = require('fs');
  file = fs.readFileSync('edict2.utf8', 'utf-8');
  dict = file.split("\n");
  resultsDiv = document.querySelector('#results');
  queryBox = document.querySelector('input');
  getMatches = function(query){
    var regex, matches, i$, ref$, len$, entry, hits, highlighted;
    regex = new RegExp(MigemoJS.getRegExp(query.trim()));
    matches = [];
    for (i$ = 0, len$ = (ref$ = dict).length; i$ < len$; ++i$) {
      entry = ref$[i$];
      hits = regex.exec(entry);
      if (hits) {
        highlighted = entry.split(hits[0]).join("<span class=\"hit\">" + hits[0] + "</span>");
        matches.push(highlighted);
        if (matches.length > 1000) {
          break;
        }
      }
    }
    return matches;
  };
  addResult = function(it){
    var div;
    div = document.createElement('div');
    div.classList.add('result');
    div.innerHTML = it;
    resultsDiv.appendChild(div);
    return div;
  };
  updateResults = function(){
    var matches;
    resultsDiv.innerHTML = '';
    matches = getMatches(queryBox.value);
    return matches.map(addResult);
  };
  debounce = function(func, wait){
    var result, timeout, timestamp, later;
    result = null;
    timeout = null;
    timestamp = null;
    later = function(){
      var lastCalled, timeout, result;
      lastCalled = new Date() - timestamp;
      if (lastCalled < wait && lastCalled >= 0) {
        return timeout = setTimeout(later, wait - lastCalled);
      } else {
        timeout = null;
        return result = func();
      }
    };
    return function(){
      var timestamp, timeout;
      timestamp = new Date();
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      return result;
    };
  };
  debouncedUpdate = debounce(updateResults, 300);
  queryBox.onkeyup = debouncedUpdate;
}).call(this);
